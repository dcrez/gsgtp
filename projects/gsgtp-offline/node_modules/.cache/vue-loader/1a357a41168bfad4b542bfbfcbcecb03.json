{"remainingRequest":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vuetify-loader\\lib\\loader.js??ref--17-0!C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\src\\views\\About.vue?vue&type=template&id=039c5b43&","dependencies":[{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\src\\views\\About.vue","mtime":1579974756803},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}