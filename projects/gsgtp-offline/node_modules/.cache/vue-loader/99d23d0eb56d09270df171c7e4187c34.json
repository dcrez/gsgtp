{"remainingRequest":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vuetify-loader\\lib\\loader.js??ref--17-0!C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\src\\components\\learnMore.vue?vue&type=template&id=2c8a7f59&scoped=true&","dependencies":[{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\src\\components\\learnMore.vue","mtime":1579069515119},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}