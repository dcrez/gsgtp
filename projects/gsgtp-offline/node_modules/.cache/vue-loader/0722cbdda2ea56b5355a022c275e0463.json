{"remainingRequest":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\src\\views\\About.vue?vue&type=template&id=024f5823&","dependencies":[{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\src\\views\\About.vue","mtime":1583713049992},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\danie\\GitHub\\dcrez.github.io\\projects\\gsgtp-offline\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImFib3V0Ij4KICA8ZGl2IGNsYXNzPSJkaXNwbGF5LTEgbXQtNSBtYi01IGZvbnQtd2VpZ2h0LWxpZ2h0Ij4KICAgIEFib3V0IFVzCiAgICA8di1idG4gY2xhc3M9Im1iLTMgZmxvYXQtcmlnaHQiIHRleHQgY29sb3I9InJlZCBkYXJrZW4tMyIgQGNsaWNrPSJnb0JhY2siPgogICAgPHYtaWNvbiBjbGFzcz0ibXItNCI+ZmFkIGZhLWFycm93LWNpcmNsZS1sZWZ0PC92LWljb24+IEdvIGJhY2sKICA8L3YtYnRuPjwvZGl2PgogIDxkaXY+CiAgICA8di1jb250YWluZXI+CiAgICAgIDx2LWNhcmQgPgogICAgICAgIDx2LWNhcmQtdGl0bGU+MjAyMCBCb2FyZCBvZiBEaXJlY3RvcnM8L3YtY2FyZC10aXRsZT4KICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICA8di1zaW1wbGUtdGFibGUgY29sb3I9InByaW1hcnkiPgogICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0ZXh0LWxlZnQiPk5hbWU8L3RoPgogICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0ZXh0LWxlZnQiPlJvbGU8L3RoPgogICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0ZXh0LWxlZnQiPlNwZWNpYWxpemF0aW9uczwvdGg+CiAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRleHQtbGVmdCI+Q29udGFjdDwvdGg+CiAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPHRyIHYtZm9yPSJwZXJzb24gaW4gYm9hcmRNZW1iZXJzIiA6a2V5PSJwZXJzb24uaWQiPgogICAgICAgICAgICAgIDx0ZD57e3BlcnNvbi5uYW1lfX08L3RkPgogICAgICAgICAgICAgIDx0ZD57e3BlcnNvbi5yb2xlfX08L3RkPgogICAgICAgICAgICAgIDx0ZD57e3BlcnNvbi5zcGVjaWFsaXphdGlvbnN9fTwvdGQ+CiAgICAgICAgICAgICAgPHRkPnt7cGVyc29uLnBob25lfX08L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgPC92LXNpbXBsZS10YWJsZT4KICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICA8L3YtY2FyZD4KICAgICAgPHYtY2FyZCBjbGFzcz0ibWVtYmVyc0F0TGFyZ2UgbXQtNSI+CiAgICAgICAgPHYtY2FyZC10aXRsZT4yMDIwIEJvYXJkIE1lbWJlcnMgYXQgTGFyZ2U8L3YtY2FyZC10aXRsZT4KICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICA8di1zaW1wbGUtdGFibGUgY29sb3I9InByaW1hcnkiPgogICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0ZXh0LWxlZnQiPk5hbWU8L3RoPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRleHQtbGVmdCI+U3BlY2lhbGl6YXRpb25zPC90aD4KICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0idGV4dC1sZWZ0Ij5Db250YWN0PC90aD4KICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICA8dHIgdi1mb3I9InBlcnNvbiBpbiBtZW1iZXJzQXRMYXJnZSIgOmtleT0icGVyc29uLmlkIj4KICAgICAgICAgICAgICA8dGQ+e3twZXJzb24ubmFtZX19PC90ZD4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8dGQ+e3twZXJzb24uc3BlY2lhbGl6YXRpb25zfX08L3RkPgogICAgICAgICAgICAgIDx0ZD57e3BlcnNvbi5waG9uZX19PC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIDwvdi1zaW1wbGUtdGFibGU+CiAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgPC92LWNhcmQ+CiAgICAgIDx2LWNhcmQgY2xhc3M9Im10LTUiPgogICAgICAgIDx2LWNhcmQtdGl0bGU+UHJlc2VudCBPcmdhbml6YXRpb248L3YtY2FyZC10aXRsZT4KICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICA8cD5UaGUgR29waGVyIFN0YXRlIEdhcmRlbiBUcmFjdG9yIFB1bGxlcnMgaGF2ZSBiZWVuIGluY29ycG9yYXRlZCBzaW5jZSAxOTg0LiBXZSBhcmUgYSBub24tcHJvZml0IG9yZ2FuaXphdGlvbiwgd2hpY2ggb3BlcmF0ZXMgb24gY2x1YiBtZW1iZXJzaGlwIGR1ZXMsIGNsYXNzIGVudHJ5IGZlZXMgYW5kIHRoZSBmZWUgY2hhcmdlZCBmb3IgcHJvdmlkaW5nIGVudGVydGFpbm1lbnQuPC9wPgogICAgICAgICAgPHA+VGhlcmUgYXJlIG1hbnkgZXhwZW5zZXMgaW5jdXJyZWQgdG8gcHJvZHVjZSBvdXIgc2hvdywgaW5jbHVkaW5nOjwvcD4KICAgICAgICAgIDx1bD4KICAgICAgICAgICAgPGxpPmluc3VyYW5jZSwKICAgICAgICAgICAgPGxpPmVsaW1pbmF0b3IgKHNsZWQpIHJlbnRhbCw8L2xpPgogICAgICAgICAgICA8bGk+c2NhbGUgbWFpbnRlbmFuY2UsPC9saT4KICAgICAgICAgICAgPGxpPlAuQS4gc3lzdGVtIGFuZCByYWRpbyBzeXN0ZW1zPC9saT4KICAgICAgICAgICAgPGxpPmFuZCBjbHViIG9wZXJhdGluZyBleHBlbnNlcy48L2xpPgogICAgICAgICAgPC91bD4KICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICA8L3YtY2FyZD4KICAgICAgPHYtY2FyZCBjbGFzcz0ibXQtNSI+CiAgICAgICAgPHYtY2FyZC10aXRsZT5IaXN0b3J5PC92LWNhcmQtdGl0bGU+CiAgICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgICAgPHA+VGhlIEdvcGhlciBTdGF0ZSBHYXJkZW4gVHJhY3RvciBQdWxsZXJzIGhhdmUgYmVlbiBpbmNvcnBvcmF0ZWQgc2luY2UgMTk4NC4gIFdlIGFyZSBhIG5vbi1wcm9maXQgb3JnYW5pemF0aW9uLCB3aGljaCBvcGVyYXRlcyBvbiBjbHViIG1lbWJlcnNoaXAgZHVlcywgY2xhc3MgZW50cnkgZmVlcyBhbmQgdGhlIGZlZSBjaGFyZ2VkIGZvciBwcm92aWRpbmcgZW50ZXJ0YWlubWVudC4gPC9wPgogICAgICAgICAgPHA+T3VyIGNsdWIgb3JpZ2luYXRlZCBpbiB0aGUgc21hbGwgc291dGhlcm4gTWlubmVzb3RhIGNvbW11bml0eSBvZiBTcHJpbmcgVmFsbGV5LiAgVGhlIG9yaWdpbmFsIG9yZ2FuaXphdGlvbiB3YXMgc3BvbnNvcmVkIGJ5IHRoZSBsb2NhbCBoaWdoIHNjaG9vbCBGdXR1cmUgRmFybWVycyBvZiBBbWVyaWNhLCB3aGljaCBpbiB0aG9zZSBkYXlzIHVzZWQgdHJhY3RvcnMgdGhhdCB3ZXJlIHN0cmljdGx5IHN0b2NrIGxhd24gdHJhY3RvcnMuICBUaGUgY29tcGV0aXRpb24gY2FtZSBmcm9tIG9uZSBwdWxsZXIgYnJhZ2dpbmcgdGhhdCBoaXMgdHJhY3RvciBjb3VsZCBvdXQgcHVsbCBldmVyeW9uZSBlbHNlJ3MuPC9wPgogICAgICAgICAgPHA+VG8gcHV0IGFuIGVuZCB0byB0aGlzIGJvYXN0aW5nLCB0aGUgdHJhY3RvcnMgd2VyZSBob29rZWQgdG8gYSBmbGF0IHNsZWQgd2VpZ2h0ZWQgYnkgdm9sdW50ZWVycy4gIEVhY2ggcGVyc29uIGp1bXBlZCBvbiBhcyB0aGUgc2xlZCB3YXMgcHVsbGVkIGRvd24gdGhlIHRyYWNrIHRvIGluY3JlYXNlIHRoZSB3ZWlnaHQsIHdoaWNoIHJlcXVpcmVkIG1vcmUgdHJhY3Rpb24gdG8gbW92ZSB0aGUgc2xlZC4gIFRodXMgYSB3aW5uZXIgd2FzIGRldGVybWluZWQgYnkgdGhlIHRyYWN0b3IgdGhhdCBjb3VsZCBwdWxsIHRoZSBtb3N0IHdlaWdodCB0aGUgZmFydGhlc3QuPC9wPgogICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgIDwvdi1jYXJkPgogICAgICA8di1jYXJkIGNsYXNzPSJtdC01Ij4KICAgICAgICA8di1jYXJkLXRpdGxlPlRyYWNrIE9wZXJhdGlvbnM8L3YtY2FyZC10aXRsZT4KICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICA8cD5Hb3BoZXIgU3RhdGUgR2FyZGVuIFRyYWN0b3IgUHVsbGVycyB1c2UgYSBtZWNoYW5pY2FsbHkgb3BlcmF0ZWQgd2VpZ2h0IHRyYW5zZmVyIGRldmljZSwgcmVmZXJyZWQgdG8gYXMgdGhlICJFbGltaW5hdG9yIG9yIFNsZWQuIiAgVGhpcyBkZXZpY2UgdXNlcyBhIGRyaXZlIG1lY2hhbmlzbSB0byB0cmFuc2ZlciB0aGUgd2VpZ2h0IGJveCBmb3J3YXJkIGFzIHRoZSBFbGltaW5hdG9yIGlzIHB1bGxlZCBkb3duIHRoZSB0cmFjay4gIEFzIHRoZSB3ZWlnaHQgbW92ZXMgZm9yd2FyZCwgbW9yZSBmb3JjZSBpcyBhcHBsaWVkIHRvIHRoZSBwYW4gc2xpZGluZyBvbiB0aGUgdHJhY2ssIHdoaWNoIGNyZWF0ZXMgcmVzaXN0YW5jZSBhbmQgZXZlbnR1YWxseSBzdG9wcyB0aGUgdHJhY3Rvci4gIEVhY2ggRWxpbWluYXRvciBpcyBlcXVpcHBlZCB3aXRoIGFuIGVsZWN0cm9uaWMgZGV2aWNlIHRvIG1lYXN1cmUgdGhlIGRpc3RhbmNlIG9mIGVhY2ggcHVsbC4gIFRoZXJlZm9yZSBlbGltaW5hdGluZyB0aGUgbmVlZCBmb3IgdHJhY2sgd29ya2VycyB0byBtYW51YWxseSBtZWFzdXJlIGVhY2ggcHVsbCBhdHRlbXB0LjwvcD4KICAgICAgICAgIDxwPlRoZSBFbGltaW5hdG9yIGFuZCB0cmFjdG9ycyBib3RoIG11c3QgcGFzcyBzdHJpY3Qgc2FmZXR5IGluc3BlY3Rpb25zIGJlZm9yZSB0aGV5IGFyZSBwZXJtaXR0ZWQgdG8gcGFydGljaXBhdGUgYXQgYSBHU0dUUCBzYW5jdGlvbmVkIGV2ZW50LiAgQWxsIG1vdmluZyBwYXJ0cyBtdXN0IGJlIHByb3Blcmx5IHNoaWVsZGVkIGFuZCBlbmdpbmUga2lsbCBzd2l0Y2hlcyBvcGVyYXRpb25hbC4gIEFsbCBkcml2ZXJzIGFyZSByZXF1aXJlZCB0byB3ZWFyIGEgc2FmZXR5IGhlbG1ldC4gIFNvbWUgY2xhc3NlcyBhbHNvIHJlcXVpcmUgdGhlIGRyaXZlciB0byB3ZWFyIGEgZmlyZSBzdWl0LiAgQWxsIHRyYWN0b3JzIGFuZCBFbGltaW5hdG9yIGFyZSBlcXVpcHBlZCB3aXRoIGZpcmUgZXh0aW5ndWlzaGVycy48L3A+CiAgICAgICAgICA8cD5BIHJlc3RyaWN0ZWQgcGl0IGFyZWEgaXMgcHJlZmVycmVkIHRvIHByb3RlY3Qgc3BlY3RhdG9ycyBkdXJpbmcgdHJhY3RvciB3ZWlnaCBpbi4gIEVhY2ggdHJhY3RvciBtdXN0IHBhc3Mgb3ZlciB0aGUgR1NHVFAgZGlnaXRhbCBlbGVjdHJvbmljIHNjYWxlIGJlZm9yZSBlbnRlcmluZyBjb21wZXRpdGlvbi4gIFRoZSBmbGFnbWFuIGNvbnRyb2xzIHRoZSBhY3Rpdml0eSBvbiB0aGUgdHJhY2sgYXQgYWxsIHRpbWVzIHdoaWxlIHRoZSBhbm5vdW5jZXIgdXNlcyB0aGUgUC5BLiBzeXN0ZW0gdG8gYnJvYWRjYXN0IHRoZSBwdWxsIGRpc3RhbmNlIGFuZCBoZWxwIGtlZXAgdGhlIGNyb3dkIGVudGVydGFpbmVkIHRocm91Z2hvdXQgdGhlIGV2ZW50LjwvcD4KICAgICAgICAgIDxwPkEgZmVuY2UgYmFycmllciBtdXN0IGJlIGVyZWN0ZWQgYXQgbGVhc3QgMTAgZmVldCBmcm9tIHRoZSB0cmFjayBhcyBhIGJvdW5kYXJ5IGZvciBzYWZldHkgb2YgdGhlIHNwZWN0YXRvcnMgYW5kIGNsdWIgbWVtYmVycy4gIFNhZmV0eSBpcyBvdXIgIzEgcHJpb3JpdHkuPC9wPgogICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgIDwvdi1jYXJkPgogICAgPC92LWNvbnRhaW5lcj4KICA8L2Rpdj4KPC9kaXY+Cg=="},null]}